[200~Below are the basic commands used in linux

Git Setup Commands â€¢ git --version: Check Git version. â€¢ git config --global user.name "Your Name": Set global username for commits. â€¢ git config --global user.email "your.email@example.com": Set global email for commits. â€¢ git config --global color.ui auto: Enable automatic command output coloring. â€¢ git config --list: List all Git configurations.

Repository Creation & Initialization â€¢ git init: Initialize a new Git repository. â€¢ git clone <repository_url>: Clone an existing repository from a URL.

Working with Files â€¢ git add : Stage a specific file. â€¢ git add .: Stage all changes in the current directory. â€¢ git add -A: Stage all changes (tracked and untracked). â€¢ git commit -m "Commit message": Commit staged changes with a message. â€¢ git commit -a -m "Commit message": Add and commit all tracked files in one step.

Checking Repository Status â€¢ git status: Check the status of your working directory. â€¢ git diff: Show changes that are not staged yet. â€¢ git diff --staged: Show changes that are staged but not committed.

Branching â€¢ git branch: List all branches. â€¢ git branch <branch_name>: Create a new branch. â€¢ git checkout <branch_name>: Switch to another branch. â€¢ git checkout -b <branch_name>: Create and switch to a new branch. â€¢ git branch -d <branch_name>: Delete a branch. â€¢ git merge <branch_name>: Merge another branch into the current branch. â€¢ git branch -m <new_name>: Rename the current branch.

Stashing Changes â€¢ git stash: Stash (save) uncommitted changes without committing. â€¢ git stash pop: Apply stashed changes and remove them from stash. â€¢ git stash list: List all stashed changes. â€¢ git stash apply: Apply stashed changes without removing them. â€¢ git stash drop: Delete a specific stash.

Viewing History â€¢ git log: View commit history. â€¢ git log --oneline: View commit history in a single line per commit. â€¢ git log --graph: Show a graphical representation of commits. â€¢ git log -p: Show commits and the differences they introduced. â€¢ git show <commit_hash>: Show details of a specific commit.

Undoing Changes â€¢ git reset : Unstage a file without changing its contents. â€¢ git reset --hard: Discard all changes in the working directory. â€¢ git checkout -- : Discard changes in a file (restore last committed version). â€¢ git revert <commit_hash>: Create a new commit that undoes changes from a specific commit. â€¢ git reset --soft <commit_hash>: Undo commits but keep changes in the working directory. â€¢ git reset --hard <commit_hash>: Undo commits and discard changes.

Remote Repositories â€¢ git remote add origin : Add a remote repository. â€¢ git remote -v: List remote repositories and their URLs. â€¢ git push origin <branch_name>: Push changes to a remote repository. â€¢ git pull: Fetch and merge changes from the remote repository. â€¢ git fetch: Fetch changes from a remote repository without merging. â€¢ git remote remove : Remove a remote repository. â€¢ git remote rename <old_name> <new_name>: Rename a remote repository.

Tags â€¢ git tag: List all tags. â€¢ git tag <tag_name>: Create a new tag. â€¢ git tag -a <tag_name> -m "Message": Create an annotated tag with a message. â€¢ git push origin <tag_name>: Push a tag to the remote repository. â€¢ git push origin --tags: Push all tags to the remote repository. â€¢ git tag -d <tag_name>: Delete a tag locally. â€¢ git push origin :refs/tags/<tag_name>: Delete a tag from a remote repository.

Ignoring Files â€¢ .gitignore: A file where you can list files or directories you want Git to ignore. â€¢ git rm --cached : Remove a file from tracking but keep it in your local file system.

Viewing File Changes â€¢ git diff : See what changes have been made to a file. â€¢ git diff <commit_hash1> <commit_hash2>: Compare two commits. â€¢ git diff <branch_name1> <branch_name2>: Compare two branches.

Collaboration & Synchronization â€¢ git clone <repository_url>: Clone a remote repository. â€¢ git fetch origin: Download changes from the remote without merging. â€¢ git merge origin/: Merge changes from a remote branch into the current branch. â€¢ git push origin <branch_name>: Push your changes to the remote branch. â€¢ git rebase : Reapply commits on top of another base tip.

Rebasing â€¢ git rebase : Reapply commits from the current branch on top of another branch. â€¢ git rebase --continue: After resolving conflicts during a rebase, continue the rebase. â€¢ git rebase --abort: Abort a rebase and go back to the state before starting the rebase.

Git Cherry-pick â€¢ git cherry-pick <commit_hash>: Apply the changes from a specific commit into the current branch.

Squashing Commits â€¢ git rebase -i HEAD~: Interactively rebase the last n commits and squash them together.

Clean-up Commands â€¢ git clean -f: Forcefully remove untracked files. â€¢ git clean -fd: Remove untracked files and directories.

Aliases â€¢ git config --global alias.<alias_name> 'git command': Create custom Git aliases. â€¢ Example: git config --global alias.st status to use git st instead of git status.
